@using EmployeeManagementSystem.BaseLibrary.Dtos
@using Syncfusion.Blazor.DropDowns
@implements IDisposable

@if (allState.ShowEmployee)
{
    if (ShowAddOrUpdateEmployee)
    {
        <div class="container">
            <div class="row mt-5">
                <div class="col-lg-1 text-center">
                    <i class="bi bi-x-lg fs-3 fw-bold text-danger" style="cursor: pointer;" @onclick="CloseForm"></i>
                </div>
                <div class="col-lg-6 text-center">
                    <h2>@Title Employee</h2>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 mt-2 mb-5 d-flex justify-content-center">
                    <div class="hstack">
                        @if (FirstLayer)
                        {
                            <div class="@FloatingNumber1 text-center">1</div>
                            <div class="@Floatingdiv1 format-border"></div>
                            <div class="@FloatingNumber2 text-center">2</div>
                            <div class="@Floatingdiv2 format-border"></div>
                        }
                        @if (SecondLayer)
                        {
                            <div class="@FloatingNumber1 text-center">1</div>
                            <div class="@Floatingdiv1 format-border"></div>
                            <div class="@FloatingNumber2 text-center">2</div>
                            <div class="@Floatingdiv2 format-border"></div>
                        }
                    </div>
                </div>

                @* Emplyee form / first / second *@
                <div class="col-lg-12">
                    <div class="container-fluid">
                        @if (FirstLayer)
                        {
                            <EditForm Enhance Model="EmployeeGroup1" OnValidSubmit="Form1">
                                <DataAnnotationsValidator />
                                <div class="row">
                                    <div class="col-lg-2"></div>
                                    <div class="col-lg-4">
                                        <div class="card-title mb-5 fw-bold" style="font-family: Tahoma;">Personal Information</div>
                                        <div class="card-body">
                                            <div class="form-group">
                                                <label class="form-label">FullName</label>
                                                <InputText @bind-Value="EmployeeGroup1.Name" class="form-control" />
                                                <ValidationMessage For="() => EmployeeGroup1.Name" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label class="form-label">Telephone Number</label>
                                                <InputText @bind-Value="EmployeeGroup1.TelephoneNumber" class="form-control" />
                                                <ValidationMessage For="() => EmployeeGroup1.TelephoneNumber" class="text-danger" />
                                            </div>
                                            
                                            <div class="form-control mt-2">
                                                <img src="@EmployeeGroup1.Photo" width="100" height="100" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-4 mt-2">
                                        <div class="card-title mb-5 fw-bold" style="font-family: Tahoma;">Other Information</div>
                                        <div class="card-body">
                                            <div class="form-group">
                                                <label class="form-label">CivilId</label>
                                                <InputText @bind-Value="EmployeeGroup1.CivilId" class="form-control" />
                                                <ValidationMessage For="() => EmployeeGroup1.CivilId" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label class="form-label">FileNumber</label>
                                                <InputText @bind-Value="EmployeeGroup1.FileNumber" class="form-control" />
                                                <ValidationMessage For="() => EmployeeGroup1.FileNumber" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label class="form-label @(ImageUploadMessage == "" ? "" : " text-danger")">
                                                    @(ImageUploadMessage == "" ? "Upload Image" : ImageUploadMessage)
                                                </label>
                                                <InputFile class="form-control" OnChange="UploadImage" />
                                                <ValidationMessage For="() => EmployeeGroup1.Photo" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-5">
                                                <button class="btn btn-primary float-end mt-4 mb-5" type="submit">
                                                    <i class="bi bi-arrow-right"></i>
                                                    Next
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-2"></div>
                                </div>
                            </EditForm>
                        }
                        @if (SecondLayer)
                        {
                            <EditForm Enhance Model="EmployeeGroup2" OnValidSubmit="Form2">
                                <DataAnnotationsValidator />
                                <div class="row">
                                    <div class="col-lg-2"></div>
                                    <div class="col-lg-4">
                                        <div class="card-title mb-5 fw-bold" style="font-family: Tahoma;">Job Information</div>
                                        <div class="card-body">
                                            <div class="form-group">
                                                <label class="form-label">JobName</label>
                                                <InputText @bind-Value="EmployeeGroup2.JobName" class="form-control" />
                                                <ValidationMessage For="() => EmployeeGroup2.JobName" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                @{
                                                    string generalDepartment = GeneralDepartment.Equals("") ? "Select general department" : GeneralDepartment;
                                                }
                                                <label class="form-label">Select General Department</label>
                                                <SfDropDownList TValue="string" TItem="GeneralDepartment" Placeholder="@generalDepartment" DataSource="GeneralDepartments">
                                                    <DropDownListFieldSettings Value="Id" Text="Name" />
                                                    <DropDownListEvents TValue="string" TItem="GeneralDepartment" ValueChange="OnGeneralDepartmentValueChange" />
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-2">
                                                @{
                                                    string department = Department.Equals("") ? "Select department" : Department;
                                                }
                                                <label class="form-label">Select Department</label>
                                                <SfDropDownList TValue="string" TItem="Department" Placeholder="@department" DataSource="Departments">
                                                    <DropDownListFieldSettings Value="Id" Text="Name" />
                                                    <DropDownListEvents TValue="string" TItem="Department" ValueChange="OnDepartmentValueChange" />
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-2">
                                                @{
                                                    var branch = Branch.Equals("") ? "Select branch" : Branch;
                                                }
                                                <label class="form-label">Select Branch</label>
                                                <SfDropDownList TValue="string" TItem="Branch" Placeholder="Select Branch" DataSource="Branches">
                                                    <DropDownListFieldSettings Value="Id" Text="Name" />
                                                    <DropDownListEvents TValue="string" TItem="Branch" ValueChange="OnBranchValueChange" />
                                                </SfDropDownList>
                                                <ValidationMessage For="()=>EmployeeGroup2.BranchId" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-4 mb-5">
                                                <button class="btn btn-primary float-start" type="button" @onclick="PrevClicked">
                                                    <i class="bi bi-arrow-left"></i>
                                                    Prev
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-4">
                                        <div class="card-title mb-5 fw-bold" style="font-family: Tahoma;">Location Information</div>
                                        <div class="card-body">
                                            <div class="form-group mt-2">
                                                @{
                                                    var country = Country.Equals("") ? "Select country" : Country;
                                                }
                                                <label class="form-label">Select province</label>
                                                <SfDropDownList TValue="string" TItem="ProvinceDto" Placeholder="Select province" DataSource="Provinces">
                                                    <DropDownListFieldSettings Value="Id" Text="Name" />
                                                    <DropDownListEvents TValue="string" TItem="ProvinceDto" ValueChange="OnProvinceValueChange" />
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-2">
                                                @{
                                                    var city = Country.Equals("") ? "Select city" : City;
                                                }
                                                <label class="form-label">Select city</label>
                                                <SfDropDownList TValue="string" TItem="DistrictDto" Placeholder="Select district" DataSource="Districts">
                                                    <DropDownListFieldSettings Value="Id" Text="Name" />
                                                    <DropDownListEvents TValue="string" TItem="DistrictDto" ValueChange="OnDistrictValueChange" />
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-2">
                                                @{
                                                    var town = Country.Equals("") ? "Select town" : Town;
                                                }
                                                <label class="form-label">Select town</label>
                                                <SfDropDownList TValue="string" TItem="WardDto" Placeholder="Select Town" DataSource="Wards">
                                                    <DropDownListFieldSettings Value="Id" Text="Name" />
                                                    <DropDownListEvents TValue="string" TItem="WardDto" ValueChange="OnWardValueChange" />
                                                </SfDropDownList>
                                                <ValidationMessage For="()=>EmployeeGroup2.TownId" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label class="form-label">Address</label>
                                                <InputText @bind-Value="EmployeeGroup2.Address" class="form-control" />
                                                <ValidationMessage For="() => EmployeeGroup2.Address" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-3">
                                                <label class="form-label">Other</label>
                                                <textarea @bind="EmployeeGroup2.Other" class="form-control" placeholder="Optional" />
                                            </div>
                                            <div class="form-group mt-4 mb-5">
                                                <button class="btn btn-primary float-end" type="submit">
                                                    <i class="bi bi-save"></i>
                                                    Save
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-2"></div>
                                </div>
                            </EditForm>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}

<style>
    .floatingDiv {
        width: 500px;
        background: #228ada;
        height: 10px;
    }

    .floatingNumber {
        border-radius: 50%;
        color: white;
        background: #1d1585;
        width: 20px;
        height: 20px;
    }

    .inactive-div {
        width: 500px;
        background: gray;
        height: 10px;
    }

    .inactive-span {
        border-radius: 50%;
        color: white;
        background: gray;
        width: 20px;
        height: 20px;
    }

    .format-border {
        border-radius: 20px;
    }
</style>

@code {
    [Parameter] public bool ShowAddOrUpdateEmployee { get; set; } = true;
    [Parameter] public EmployeeGroup1 EmployeeGroup1 { get; set; } = new();
    [Parameter] public EmployeeGroup2 EmployeeGroup2 { get; set; } = new();

    [Parameter] public Employee Employee { get; set; } = new();

    [Parameter] public List<ProvinceDto> Provinces { get; set; } = new();
    [Parameter] public List<DistrictDto> Districts { get; set; } = new();
    [Parameter] public List<WardDto> Wards { get; set; } = new();

    [Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    [Parameter] public List<Department> Departments { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();

    public string Title { get; set; } = "Add";
    public string GeneralDepartment { get; set; } = "";
    public string Department { get; set; } = "";
    public string Branch { get; set; } = "";
    public string Country { get; set; } = "";
    public string City { get; set; } = "";
    public string Town { get; set; } = "";

    string FloatingNumber1 = "floatingNumber";
    string Floatingdiv1 = "floatingDiv";

    string FloatingNumber2 = "inactive-span";
    string Floatingdiv2 = "inactive-div";

    public bool FirstLayer { get; set; } = true;
    public bool SecondLayer { get; set; } = false;

    private void ShowLayer2()
    {
        FirstLayer = false;
        SecondLayer = true;
    }

    private void PrevClicked()
    {
        FirstLayer = true;
        SecondLayer = false;
    }

    // File Upload
    string ImageUploadMessage = "";
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        if (e.File.Name.ToLower().Contains(".png"))
        {
            var format = "image/png";
            var resizeImage = await e.File.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            ImageUploadMessage = "";
            EmployeeGroup1.Photo = imageData;
            imageData = "";

            return;
        }
        EmployeeGroup1.Photo = "";
        ImageUploadMessage = "PNG file needed";
        return;
    }

    //Form validations
    //Form 1
    private bool ValidationEmployeeGroup1()
    {
        if (string.IsNullOrEmpty(EmployeeGroup1.Name)
        || string.IsNullOrEmpty(EmployeeGroup1.TelephoneNumber)
        || string.IsNullOrEmpty(EmployeeGroup1.CivilId)
        || string.IsNullOrEmpty(EmployeeGroup1.FileNumber))
            return false;
        return true;
    }

    //Form 2
    private bool ValidationEmployeeGroup2()
    {
        if (string.IsNullOrEmpty(EmployeeGroup2.JobName) || string.IsNullOrEmpty(EmployeeGroup2.TownId) || EmployeeGroup2.BranchId == 0 || string.IsNullOrEmpty(EmployeeGroup2.Address))
            return false;
        return true;
    }

    // Save Form
    [Parameter] public EventCallback<Employee> HandleSaveEmployeeClickedEvent { get; set; }
    private void Form1()
    {
        var isValid = ValidationEmployeeGroup1();

        if (isValid)
        {
            Employee.Name = EmployeeGroup1.Name;
            Employee.TelephoneNumber = EmployeeGroup1.TelephoneNumber;
            Employee.CivilId = EmployeeGroup1.CivilId;
            Employee.FileNumber = EmployeeGroup1.FileNumber;
            Employee.Photo = EmployeeGroup1.Photo;
            ShowLayer2();
        }

    }

    private async Task Form2()
    {
        var isValid = ValidationEmployeeGroup2();

        if (isValid)
        {
            Employee.JobName = EmployeeGroup2.JobName;
            Employee.Other = EmployeeGroup2.Other;
            Employee.BranchId = EmployeeGroup2.BranchId;
            Employee.TownId = EmployeeGroup2.TownId;
            await HandleSaveEmployeeClickedEvent.InvokeAsync(Employee);
            EmployeeGroup1 = new();
            EmployeeGroup2 = new();
            Employee = new();
        }
    }

    public void ClearContent()
    {
        Employee = new();
        EmployeeGroup1 = new();
        EmployeeGroup2 = new();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        allState.Action += StateHasChanged;
    }

    public void Dispose() => allState.Action -= StateHasChanged;

    [Parameter] public EventCallback NotifyParentFormCloseClicked { get; set; }
    private async Task CloseForm()
    {
        ShowAddOrUpdateEmployee = false;
        await NotifyParentFormCloseClicked.InvokeAsync();
    }

    #region Location
    [Parameter] public EventCallback<string> HandleProvinceSelectedEvent { get; set; }
    private async Task OnProvinceValueChange(ChangeEventArgs<string, ProvinceDto> e)
    {
        ProvinceId = e.Value;
        await HandleProvinceSelectedEvent.InvokeAsync(e.Value);
    }

    [Parameter] public EventCallback<(string provinceId, string districtId)> HandleDistrictSelectedEvent { get; set; }
    public string? ProvinceId { get; set; } = string.Empty;
    private async Task OnDistrictValueChange(ChangeEventArgs<string, DistrictDto> e) => await HandleDistrictSelectedEvent.InvokeAsync((ProvinceId!, e.Value));

    private void OnWardValueChange(ChangeEventArgs<string, WardDto> e) => EmployeeGroup2.TownId = e.Value;
    #endregion
    



    [Parameter] public EventCallback<int> HandleGeneralDepartmentSelectedEvent { get; set; }
    private async Task OnGeneralDepartmentValueChange(ChangeEventArgs<string, GeneralDepartment> e) => await HandleGeneralDepartmentSelectedEvent.InvokeAsync(int.Parse(e.Value));

    [Parameter] public EventCallback<int> HandleDepartmentSelectedEvent { get; set; }
    private async Task OnDepartmentValueChange(ChangeEventArgs<string, Department> e) => await HandleDepartmentSelectedEvent.InvokeAsync(int.Parse(e.Value));

    private void OnBranchValueChange(ChangeEventArgs<string, Branch> e) => EmployeeGroup2.BranchId = int.Parse(e.Value);
}
