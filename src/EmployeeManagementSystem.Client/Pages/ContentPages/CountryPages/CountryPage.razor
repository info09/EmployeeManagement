@using EmployeeManagementSystem.ClientLibrary.Helpers
@implements IDisposable

@if (allState.ShowCountry)
{
<div class="container-fluid mt-5">
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="float-start">General Department</h4>
                    <button class="btn btn-outline-success float-end" @onclick="OpenCreate">
                        <i class="bi bi-plus-circle-dotted"></i>Add Country
                    </button>
                </div>
                <div class="card-body" style="max-height: 580px; overflow-x:hidden;overflow-y:scroll;">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Id</th>
                                <th scope="col">General Department</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                                @if (ListCountry != null && ListCountry.Count > 0)
                            {
                                int count = 1;
                                    foreach (var item in ListCountry)
                                {
                                    <tr>
                                        <th scope="row">@count</th>
                                        <td>@item.Id</td>
                                        <td>@item.Name</td>
                                        <td>
                                            <i class="bi bi-pencil text-info" style="cursor: pointer;" @onclick="() => EditClick(item)"></i>
                                            <i class="bi bi-trash text-danger" style="cursor: pointer;" @onclick="() => DeleteClick(item)"></i>
                                        </td>
                                    </tr>
                                    count++;
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="4">
                                        <div class="alert alert-info text-center">No Country added yet!</div>
                                    </td>
                                </tr>
                            }


                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

}
<CountryDialog @ref="countryDialog"
                         HandleSaveOperationEvent="HandleSaveOperationEvent"
                         Country="CountryParameter" />

@code {
    CountryDialog? countryDialog;
    Country CountryParameter = new();
    public string Title { get; set; } = "Add";
    public List<Country> ListCountry { get; set; } = new();

    private void OpenDialog()
    {
        countryDialog?.OpenDialog();
    }

    private void OpenCreate()
    {
        CountryParameter = new();
        countryDialog?.ChangeTitle("Add");
        OpenDialog();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCountries();
        allState.Action += StateHasChanged;
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }

    private async Task GetCountries()
    {
        ListCountry = await CountryService.GetAll(Constants.CountryUrl);
    }

    private void EditClick(Country country)
    {
        countryDialog?.ChangeTitle("Update");
        CountryParameter = country;
        OpenDialog();
    }

    private async void DeleteClick(Country country)
    {
        var confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {country.Name}?", "Confirm Delete");
        if (!confirm) return;
        var response = await CountryService.Delete(Constants.CountryUrl, country.Id);
        if (await DisplayMessage(response.flag, response.message))
        {
            await GetCountries();
        }
        StateHasChanged();
    }

    private async Task HandleSaveOperationEvent(Country country)
    {
        bool isSuccess = false;
        if (country.Id > 0)
        {
            var result = await CountryService.Update(Constants.CountryUrl, country);
            isSuccess = await DisplayMessage(result.flag, result.message);
        }
        else
        {
            var result = await CountryService.Insert(Constants.CountryUrl, country);
            isSuccess = await DisplayMessage(result.flag, result.message);
        }
        if (isSuccess)
        {
            country = new();

            countryDialog?.ChangeTitle("Add");
        }
        await GetCountries();
        StateHasChanged();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
            await dialogService.AlertAsync(message, "Success Operation");
        else
            await dialogService.AlertAsync(message, "Alert");

        return flag;
    }
}
