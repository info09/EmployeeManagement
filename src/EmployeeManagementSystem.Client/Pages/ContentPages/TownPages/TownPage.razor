@using EmployeeManagementSystem.Client.Pages.ContentPages.BranchPages
@using EmployeeManagementSystem.ClientLibrary.Helpers
@implements IDisposable
@if (allState.ShowTown)
{
    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Town</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i>Add Town
                        </button>
                    </div>
                    <div class="card-body" style="max-height: 580px; overflow-x:hidden;overflow-y:scroll;">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Id</th>
                                    <th scope="col">City</th>
                                    <th scope="col">Town</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (ListTown != null && ListTown.Count > 0)
                                {
                                    int count = 1;
                                    foreach (var item in ListTown)
                                    {
                                        <tr>
                                            <th scope="row">@count</th>
                                            <td>@item.Id</td>
                                            <td>@item.City!.Name</td>
                                            <td>@item.Name</td>
                                            <td>
                                                <i class="bi bi-pencil text-info" style="cursor: pointer;" @onclick="() => EditClick(item)"></i>
                                                <i class="bi bi-trash text-danger" style="cursor: pointer;" @onclick="() => DeleteClick(item)"></i>
                                            </td>
                                        </tr>
                                        count++;
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="5">
                                            <div class="alert alert-info text-center">No Branch added yet!</div>
                                        </td>
                                    </tr>
                                }


                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

}
<TownDialog @ref="townDialog" HandleSaveOperationEvent="HandleSaveOperationEvent" Town="Town" ListCity="ListCity" />

@code {
    public string Title { get; set; } = "Add";
    TownDialog townDialog = new();
    Town Town = new();
    public List<Town> ListTown { get; set; } = new();
    public List<City> ListCity { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetTowns();
        await GetCities();
        allState.Action += StateHasChanged;
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }

    private async Task GetTowns()
    {
        ListTown = await TownService.GetAll(Constants.TownUrl);
    }

    private async Task GetCities()
    {
        ListCity = await CityService.GetAll(Constants.CityUrl);
    }

    private void AddButtonClicked()
    {
        townDialog?.ChangeTitle("Add");
        Town = new();
        OpenDialog();
    }

    private void OpenDialog()
    {
        townDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(Town town)
    {
        bool isSuccess = false;
        if (town.Id > 0)
        {
            var result = await TownService.Update(Constants.TownUrl, town);
            isSuccess = await DisplayMessage(result.flag, result.message);
        }
        else
        {
            var result = await TownService.Insert(Constants.TownUrl, town);
            isSuccess = await DisplayMessage(result.flag, result.message);
        }
        if (isSuccess)
        {
            town = new();

            townDialog?.ChangeTitle("Add");
        }
        await GetCities();
        StateHasChanged();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
            await dialogService.AlertAsync(message, "Success Operation");
        else
            await dialogService.AlertAsync(message, "Alert");

        return flag;
    }

    private void EditClick(Town town)
    {
        townDialog?.ChangeTitle("Update");
        Town = town;
        OpenDialog();
    }

    private async void DeleteClick(Town town)
    {
        var confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {town.Name}?", "Confirm Delete");
        if (!confirm) return;
        var response = await TownService.Delete(Constants.TownUrl, town.Id);
        if (await DisplayMessage(response.flag, response.message))
        {
            await GetTowns();
        }
        StateHasChanged();
    }
}
