@using EmployeeManagementSystem.ClientLibrary.Helpers
@implements IDisposable
@if (allState.ShowBranch)
{
    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Branch</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i>Add Branch
                        </button>
                    </div>
                    <div class="card-body" style="max-height: 580px; overflow-x:hidden;overflow-y:scroll;">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Id</th>
                                    <th scope="col">Department</th>
                                    <th scope="col">Branch</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (ListBranch != null && ListBranch.Count > 0)
                                {
                                    int count = 1;
                                    foreach (var item in ListBranch)
                                    {
                                        <tr>
                                            <th scope="row">@count</th>
                                            <td>@item.Id</td>
                                            <td>@item.Department!.Name</td>
                                            <td>@item.Name</td>
                                            <td>
                                                <i class="bi bi-pencil text-info" style="cursor: pointer;" @onclick="() => EditClick(item)"></i>
                                                <i class="bi bi-trash text-danger" style="cursor: pointer;" @onclick="() => DeleteClick(item)"></i>
                                            </td>
                                        </tr>
                                        count++;
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="5">
                                            <div class="alert alert-info text-center">No Branch added yet!</div>
                                        </td>
                                    </tr>
                                }


                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

}
<BranchDialog @ref="branchDialog" HandleSaveOperationEvent="HandleSaveOperationEvent" Branch="Branch" ListDepartment="ListDepartment" />

@code {
    public string Title { get; set; } = "Add";
    BranchDialog branchDialog = new();
    Branch Branch = new();
    public List<Branch> ListBranch { get; set; } = new();
    public List<Department> ListDepartment { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetBranches();
        await GetDepartments();
        allState.Action += StateHasChanged;
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }

    private async Task GetDepartments()
    {
        ListDepartment = await DepartmentService.GetAll(Constants.DepartmentUrl);
    }

    private async Task GetBranches()
    {
        ListBranch = await BranchService.GetAll(Constants.BranchUrl);
    }

    private void AddButtonClicked()
    {
        branchDialog?.ChangeTitle("Add");
        Branch = new();
        OpenDialog();
    }

    private void OpenDialog()
    {
        branchDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(Branch branch)
    {
        bool isSuccess = false;
        if (branch.Id > 0)
        {
            var result = await BranchService.Update(Constants.BranchUrl, branch);
            isSuccess = await DisplayMessage(result.flag, result.message);
        }
        else
        {
            var result = await BranchService.Insert(Constants.BranchUrl, branch);
            isSuccess = await DisplayMessage(result.flag, result.message);
        }
        if (isSuccess)
        {
            branch = new();

            branchDialog?.ChangeTitle("Add");
        }
        await GetBranches();
        StateHasChanged();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
            await dialogService.AlertAsync(message, "Success Operation");
        else
            await dialogService.AlertAsync(message, "Alert");

        return flag;
    }

    private void EditClick(Branch branch)
    {
        branchDialog?.ChangeTitle("Update");
        Branch = branch;
        OpenDialog();
    }

    private async void DeleteClick(Branch branch)
    {
        var confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {branch.Name}?", "Confirm Delete");
        if (!confirm) return;
        var response = await BranchService.Delete(Constants.BranchUrl, branch.Id);
        if (await DisplayMessage(response.flag, response.message))
        {
            await GetBranches();
        }
        StateHasChanged();
    }
}
